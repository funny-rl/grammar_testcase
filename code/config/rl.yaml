data:
  task_name: null
  tokenizer: null
  path: ./data/folder_name
  train_files: ${data.path}/parquet/train.parquet
  val_files: ${data.path}/parquet/valid.parquet
  prompt_key: prompt
  reward_fn_key: data_source
  max_prompt_length: 2600
  max_response_length: 300
  train_batch_size: 16
  val_batch_size: 32
  return_raw_input_ids: False  # This should be set to true when the tokenizer between policy and rm differs
  return_raw_chat: False
  return_full_prompt: False
  shuffle: True
  filter_overlong_prompts: False # for large-scale dataset, filtering overlong prompts could be timeconsuming. You cat set the filter_overlong_prompts_workers to use multiprocessing to speed up.
  filter_overlong_prompts_workers: 1
  truncation: error
  image_key: images
  video_key: videos
  custom_cls:
      path: null
      name: null

custom_reward_function:
  path: ./reward_model/rm_name.py
  name: compute_score

actor_rollout_ref:
  hybrid_engine: True
  model:
    load_param: False
    load_param_path: null
    path: deepseek-ai/DeepSeek-R1-Distill-Qwen-14B
    external_lib: null
    override_config: { }
    enable_gradient_checkpointing: True
    use_remove_padding: False
    use_liger: False
    use_fused_kernels: False
    trust_remote_code: False
  actor:
    strategy: fsdp  # [fsdp, fsdp2], This is for backward-compatibility
    ppo_mini_batch_size: 256
    ppo_micro_batch_size: null # will be deprecated, use ppo_micro_batch_size_per_gpu
    ppo_micro_batch_size_per_gpu: null
    use_dynamic_bsz: False
    ppo_max_token_len_per_gpu: 16384 # n * ${data.max_prompt_length} + ${data.max_response_length}
    grad_clip: 1.0
    # pg_losses2 = -advantages * torch.clamp(ratio, 1 - cliprange_low, 1 + cliprange_high)
    clip_ratio: 0.2 # default value if clip_ratio_low and clip_ratio_high are not specified
    clip_ratio_low: 0.2
    clip_ratio_high: 0.2
    clip_ratio_c: 3.0 # lower bound of the value for Dual-clip PPO from https://arxiv.org/pdf/1912.09729
    loss_agg_mode: "token-mean" # / "seq-mean-token-sum" / "seq-mean-token-mean"
    entropy_coeff: 0
    use_kl_loss: True # True for GRPO
    use_torch_compile: True # False to disable torch compile
    kl_loss_coef: 0.001 # for grpo
    kl_loss_type: low_var_kl # for grpo
    ppo_epochs: 1
    shuffle: False
    ulysses_sequence_parallel_size: 1 # sp size
    entropy_from_logits_with_chunking: False # calculate entropy with chunking to reduce memory peak
    entropy_checkpointing: False # recompute entropy
    checkpoint:
      save_contents: ['model', 'optimizer', 'extra']  # with 'hf_model' you can save whole model as hf format, now only use sharded model checkpoint to save space
      load_contents: ${actor_rollout_ref.actor.checkpoint.save_contents} # For more flexibility, you can specify the contents to load from the checkpoint.
    optim:
      lr: 1e-6
      lr_warmup_steps: -1 # Prioritized. Negative values mean delegating to lr_warmup_steps_ratio.
      lr_warmup_steps_ratio: 0.  # the total steps will be injected during runtime
      min_lr_ratio: 0.0   # only used with cosine lr scheduler, default to 0.0
      num_cycles: 0.5     # only used with cosine lr scheduler, default to 0.5
      warmup_style: constant  # select from constant/cosine
      total_training_steps: -1  # must be override by program
      weight_decay: 0.01
    fsdp_config:
      wrap_policy:
        # transformer_layer_cls_to_wrap: None
        min_num_params: 0
      param_offload: False
      optimizer_offload: False
      offload_policy: False # only for fsdp2, offload param\grad\optimizer during train
      reshard_after_forward: True # only for fsdp2, [True, False, int between 1 and fsdp_size]
      fsdp_size: -1
      forward_prefetch: False
  ref:
    strategy: fsdp
    fsdp_config:
      param_offload: False
      reshard_after_forward: True # only for fsdp2, [True, False, int between 1 and fsdp_size]
      forward_prefetch: False
      wrap_policy:
        # transformer_layer_cls_to_wrap: None
        min_num_params: 0
    use_torch_compile: ${actor_rollout_ref.actor.use_torch_compile}
    log_prob_micro_batch_size: null # will be deprecated, use log_prob_micro_batch_size_per_gpu
    log_prob_micro_batch_size_per_gpu: null
    log_prob_use_dynamic_bsz: ${actor_rollout_ref.actor.use_dynamic_bsz}
    log_prob_max_token_len_per_gpu: ${actor_rollout_ref.actor.ppo_max_token_len_per_gpu}
    ulysses_sequence_parallel_size: ${actor_rollout_ref.actor.ulysses_sequence_parallel_size} # sp size
    entropy_from_logits_with_chunking: False # calculate entropy with chunking to reduce memory peak
    entropy_checkpointing: False # recompute entropy
  rollout:
    name: vllm
    mode: sync # sync: LLM, async: AsyncLLM
    chat_scheduler: null # async chat scheduler, e.g examples.ppo_trainer.naive_chat_scheduler.NaiveChatCompletionScheduler
    temperature: 0.6
    top_k: -1 # 0 for hf rollout, -1 for vllm rollout
    top_p: 0.9
    use_fire_sampling: False # https://arxiv.org/abs/2410.21236
    prompt_length: ${data.max_prompt_length}  # not use for opensource
    response_length: ${data.max_response_length}
    # for vllm rollout
    dtype: bfloat16 # should align with FSDP
    gpu_memory_utilization: 0.5
    ignore_eos: False
    enforce_eager: True
    free_cache_engine: True
    load_format: dummy_dtensor
    tensor_model_parallel_size: 4
    max_num_batched_tokens: 8192
    max_model_len: null
    max_num_seqs: 1024
    log_prob_micro_batch_size: null # will be deprecated, use log_prob_micro_batch_size_per_gpu
    log_prob_micro_batch_size_per_gpu: null
    log_prob_use_dynamic_bsz: ${actor_rollout_ref.actor.use_dynamic_bsz}
    log_prob_max_token_len_per_gpu: ${actor_rollout_ref.actor.ppo_max_token_len_per_gpu}
    disable_log_stats: True
    enable_chunked_prefill: True # may get higher throughput when set to True. When activated, Please increase max_num_batched_tokens or decrease max_model_len.
    # for hf rollout
    do_sample: True
    # number of responses (i.e. num sample times)
    n: 5 # > 1 for grpo
    engine_kwargs: # inference engine parameters
      swap_space: null # null means "use the engine default value" (usually 4 GB), setting it to, e.g., 32 means 32 GB
    val_kwargs:
      # sampling parameters for validation
      top_k: -1 # 0 for hf rollout, -1 for vllm rollout
      top_p: 1.0
      temperature: 0
      n: 1
      do_sample: False # default eager for validation
    multi_turn:
      enable: False  # should set rollout.name to sglang_async if True
      max_turns: null  # null for no limit (default max_length // 3)
      tool_config_path: null  # null for no tool
      # null for default callback
      completion_callback: null
      # - When set to True, the model's default chat template is used for multi-turn rollout, which typically matches production behavior.
      # - When set to False, the token ids recorded for training are used instead; unlike the default chat template, these always include the model's full output,
      #   which may contain additional content such as reasoning content. This maintains the consistency between training and rollout, but it will lead to longer prompts.
      use_inference_chat_template: False

      # Tokenization is performed turn by turn and the resulting token ids are concatenated to form the full conversation.
      # To ensure this matches the result of tokenizing the entire conversation at once, a sanity check is run at the end of each multi-turn rollout to compare the two sets of token ids.
      # Some models are known to produce different tokenization results when tokenizing turn by turn vs. all at once. aThis behavior has already been validated for them.
      # To reduce excessive warnings, you can turn off the sanity check for these models if you are using their default chat template:
      # Qwen/QwQ-32B, Qwen/Qwen3-xxB
      enable_tokenization_sanity_check: True

# config for the algorithm
algorithm:
  gamma: 1.0  # Discount factor for future rewards
  lam: 1.0 # Trade-off between bias and variance in the GAE estimator
  adv_estimator: grpo # Advantage estimation method: "gae", "td", or "td_lambda"
  norm_adv_by_std_in_grpo: True # Whether to normalize advantages by std (specific to GRPO)
  use_kl_in_reward: False # Whether to enable in-reward KL penalty
  kl_penalty: kl # How to estimate KL divergence: "kl", "abs", "mse", "low_var_kl", or "full"
  kl_ctrl: # KL control configuration
    type: fixed # KL control type: "fixed" or "adaptive"
    kl_coef: 0.001 # Initial coefficient for KL penalty
    horizon: 10000 # Horizon value for adaptive controller (if enabled)
    target_kl: 0.1 # Target KL divergence (used for adaptive controller)
  use_pf_ppo: False # Whether to enable preference feedback PPO
  pf_ppo: # Preference feedback PPO settings
    reweight_method: pow # Method for reweighting samples: "pow", "max_min", or "max_random"
    weight_pow: 2.0 # Power used for weight scaling in "pow" method

trainer:
  balance_batch: True
  total_epochs: 2
  total_training_steps: null
  project_name: verl_examples
  experiment_name: gsm8k
  logger: [ 'console', 'wandb' ]
  log_val_generations: 0
  rollout_data_dir: null # directory for logging the rollout data, no dump if null
  validation_data_dir: null # directory for logging the validation data, no dump if null
  nnodes: 1
  n_gpus_per_node: 4
  save_freq: -1
  # auto: find the last ckpt to resume. If can't find, start from scratch
  resume_mode: auto # or disable or resume_path if resume_from_path is set
  resume_from_path: null
  val_before_train: True
  test_freq: -1
  critic_warmup: 0
  default_hdfs_dir: null
  del_local_ckpt_after_load: False
  default_local_dir: checkpoints/${trainer.project_name}/${trainer.experiment_name}
  max_actor_ckpt_to_keep: null
  max_critic_ckpt_to_keep: null
  # The timeout for ray worker group to wait for the register center to be ready
  ray_wait_register_center_timeout: 300
  device: cuda

ray_init:
  num_cpus: null # `None` means using all CPUs, which might cause hang if limited in systems like SLURM. Please set to a number allowed then.
  timeline_json_file: null  # Path to save Ray timeline JSON for performance profiling



critic:
  rollout_n: ${actor_rollout_ref.rollout.n} # Number of rollouts per update (mirrors actor rollout_n)
  strategy: fsdp # fsdp or fsdp2 strategy used for critic model training
  optim: # optimizer configs
    lr: 1e-5 # Learning rate
    lr_warmup_steps_ratio: 0. # Warmup steps ratio; total steps will be injected at runtime
    min_lr_ratio: null # Minimum LR ratio for cosine schedule
    warmup_style: constant # LR warmup style: "constant" or "cosine"
    total_training_steps: -1 # Total training steps (must be overridden at runtime)
    weight_decay: 0.01 # Weight decay
  model: # model config for the critic
    path: ~/models/deepseek-llm-7b-chat # Path to pretrained model weights
    use_shm: False # Whether to use shared memory for loading the model
    tokenizer_path: ${actor_rollout_ref.model.path} # Tokenizer path (defaults to actor's model path)
    override_config: { } # Hugging Face config override
    external_lib: ${actor_rollout_ref.model.external_lib} # External model implementation (optional)
    enable_gradient_checkpointing: True # Enable gradient checkpointing to save memory
    enable_activation_offload: False # Offload activations to CPU to reduce GPU memory usage
    use_remove_padding: False # Use remove padding optimization (saves compute)
    trust_remote_code: ${actor_rollout_ref.model.trust_remote_code} # Whether to trust remote code from Hugging Face models
    fsdp_config: # FSDP-specific config
      param_offload: False # Whether to offload model parameters to CPU
      optimizer_offload: False # Whether to offload optimizer state to CPU
      offload_policy: False # Only for FSDP2: offload param/grad/optimizer during train
      reshard_after_forward: True # Only for FSDP2: Reshard after forward pass to reduce memory footprint
      wrap_policy: # Policy for wrapping layers with FSDP
        min_num_params: 0 # Minimum number of parameters to trigger wrapping
      fsdp_size: -1 # Number of GPUs in each FSDP shard group; -1 means auto
      forward_prefetch: False # Only for FSDP1: FSDP1 configuration, prefetch the next forward-pass all-gather # before the current forward computation.
    lora_rank: 0 # Set to positive value to enable LoRA (e.g., 32)
    lora_alpha: 16 # LoRA scaling factor
    target_modules: all-linear # LoRA target modules: "all-linear" or list of linear projection layers
  ppo_mini_batch_size: ${actor_rollout_ref.actor.ppo_mini_batch_size} # PPO mini-batch size per update
  ppo_micro_batch_size: null # [Deprecated] Global micro batch size
  ppo_micro_batch_size_per_gpu: null # Local per-GPU micro batch size
  forward_micro_batch_size: ${critic.ppo_micro_batch_size} # Forward-only batch size (global)
  forward_micro_batch_size_per_gpu: ${critic.ppo_micro_batch_size_per_gpu} # Forward-only batch size (per GPU)
  use_dynamic_bsz: ${actor_rollout_ref.actor.use_dynamic_bsz} # Whether to automatically adjust batch size at runtime
  ppo_max_token_len_per_gpu: 32768 # Max tokens per GPU in one PPO batch (doubled for critic)
  forward_max_token_len_per_gpu: ${critic.ppo_max_token_len_per_gpu} # Max token length per GPU in forward pass
  ulysses_sequence_parallel_size: 1 # Sequence parallelism size for Ulysses-style model parallelism
  ppo_epochs: ${actor_rollout_ref.actor.ppo_epochs} # Number of PPO epochs per batch
  shuffle: ${actor_rollout_ref.actor.shuffle} # Shuffle training data across PPO epochs
  grad_clip: 1.0 # Gradient clipping for critic updates
  cliprange_value: 0.5 # PPO value function clipping range
  loss_agg_mode: ${actor_rollout_ref.actor.loss_agg_mode} # Loss aggregation mode: "token-mean", "seq-mean-token-sum", or "seq-mean-token-mean"
  checkpoint: # checkpoint configs
    save_contents: ['model', 'optimizer', 'extra'] # What to include in saved checkpoints # with 'hf_model' you can save whole model as hf format, now only use sharded model checkpoint to save space
    load_contents: ${critic.checkpoint.save_contents} # What to include when loading checkpoints
reward_model: # configs for the reward model
  enable: False # Whether to enable reward model. If False, we compute the reward only with the user-defined reward functions. # In GSM8K and Math examples, we disable reward model. # For RLHF alignment example using full_hh_rlhf, we utilize reward model to assess the responses. # If False, the following parameters are not effective
  strategy: fsdp # FSDP strategy: "fsdp" or "fsdp2"
  model: # model config for reward scoring
    input_tokenizer: ${actor_rollout_ref.model.path} # Input tokenizer. If the reward model’s chat template is inconsistent with the policy, # we need to first decode to plaintext, then apply the rm’s chat_template. # Then score with RM. If chat_templates are consistent, it can be set to null.
    path: ~/models/FsfairX-LLaMA3-RM-v0.1 # RM’s HDFS path or local path. Note that RM only supports AutoModelForSequenceClassification. # Other model types need to define their own RewardModelWorker and pass it from the code.
    use_shm: False # Whether to use shared memory for loading the model
    external_lib: ${actor_rollout_ref.model.external_lib} # External model implementation (optional)
    use_remove_padding: False # Use remove padding optimization (saves compute)
    use_fused_kernels: ${actor_rollout_ref.model.use_fused_kernels} # Whether to use fused reward kernels for speedup
    trust_remote_code: False # Whether to enable loading a remote code model, default to False
    fsdp_config: # FSDP-specific config
      wrap_policy: # Policy for wrapping layers with FSDP
        min_num_params: 0 # Minimum number of parameters to trigger wrapping
      param_offload: False # Whether to offload model parameters to CPU
      reshard_after_forward: True # Only for FSDP2: Reshard after forward pass to reduce memory footprint
      fsdp_size: -1 # Number of GPUs in each FSDP shard group; -1 means auto
      forward_prefetch: False # Only for FSDP1: FSDP1 configuration, prefetch the next forward-pass all-gather # before the current forward computation.
  micro_batch_size: null # [Deprecated] Global micro batch size
  micro_batch_size_per_gpu: null # Local per-GPU micro batch size
  max_length: null # Maximum sequence length to process for scoring
  ulysses_sequence_parallel_size: 1 # Sequence parallelism size for Ulysses-style model parallelism
  use_dynamic_bsz: ${critic.use_dynamic_bsz} # Whether to dynamically adjust batch size at runtime
  forward_max_token_len_per_gpu: ${critic.forward_max_token_len_per_gpu} # Maximum number of tokens per GPU in one forward pass
  reward_manager: naive # Reward Manager. This defines the mechanism of computing rule-based reward and handling different reward sources. # Default is naive. If all verification functions are multiprocessing-safe, # the reward manager can be set to prime for parallel verification.
  launch_reward_fn_async: False # Whether to launch custom reward function asynchronously during log_prob
  sandbox_fusion: # Cloud/local sandbox fusion configuration for custom reward logic
    url: null # Cloud/local function URL for sandbox execution
    max_concurrent: 64 # Max concurrent requests allowed to sandbox